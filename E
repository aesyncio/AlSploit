local LocalPlayer = game.Players.LocalPlayer

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")

local BedwarsSwords = require(ReplicatedStorage.TS.games.bedwars["bedwars-swords"]).BedwarsMelees
local KnitClient = debug.getupvalue(require(LocalPlayer.PlayerScripts.TS.knit).setup, 6)
local Client = require(ReplicatedStorage.TS.remotes).default.Client

local BedwarsPlaceId = ""

local Settings = {
	Killaura = {Value = true, Range = 20, Multiaura = true, CustomAnimation = true},
	PlayerTp = {Value = false},
	Autowin = {Value = true, SpeedMultiplier = 1},
	NoFall = {Value = true},
	Nuker = {Value = true, Range = 30, CustomAnimation = true},
	BedTp = {Value = false},
}

local function DumpRemote(Tab)
	for i, v in pairs(Tab) do
		if v == "Client" then
			return Tab[i + 1]
		end
	end
	
	return ""
end

local BedwarsRemotes = {
	ClientHandlerStore = require(LocalPlayer.PlayerScripts.TS.ui.store).ClientStore,
	AttackRemote = DumpRemote(debug.getconstants(KnitClient.Controllers.SwordController.sendServerRequest)),	
	ResetRemote = ReplicatedStorage:WaitForChild("rbxts_include"):WaitForChild("node_modules"):WaitForChild("@rbxts"):WaitForChild("net"):WaitForChild("out"):WaitForChild("_NetManaged"):WaitForChild("ResetCharacter")
}

function FindNearestPlayerWithLowestHealth()
	local NearestPlayerWithLowestHealth = nil
	local NearestPlayerHealth = math.huge

	for i, v in pairs(game.Players:GetPlayers()) do
		if IsAlive(v) and v ~= LocalPlayer and v.Team ~= LocalPlayer.Team then
			local Health = v.Character:GetAttribute("Health")

			if Health < NearestPlayerHealth then
				NearestPlayerWithLowestHealth = v
				NearestPlayerHealth = Health			
			end
		end
	end

	return NearestPlayerWithLowestHealth
end

function FindNearestPlayer()
	local NearestPlayerDistance = math.huge
	local NearestPlayer = nil
	
	for i, v in pairs(game.Players:GetPlayers()) do
		if IsAlive(v) and v ~= LocalPlayer and v.Team ~= LocalPlayer.Team then
			local Magnitude = (LocalPlayer.Character.PrimaryPart.Position - v.Character.PrimaryPart.Position).Magnitude
			
			if Magnitude < NearestPlayerDistance then
				NearestPlayerDistance = Magnitude
				NearestPlayer = v
			end
		end
	end
	
	return NearestPlayer
end

function GetMatchState()
	return BedwarsRemotes.ClientHandlerStore:getState().Game.matchState
end

local function GetInventory(Player)
	if not Player then 
		return {Items = {}, Armor = {}}
	end

	local Success, Return = pcall(function() 
		return require(ReplicatedStorage.TS.inventory["inventory-util"]).InventoryUtil.getInventory(Player)
	end)

	if not Success then 
		return {Items = {}, Armor = {}}
	end
	
	if IsAlive(Player) and Player.Character:FindFirstChild("InventoryFolder") then 		
		local InventoryFolder = Player.Character:FindFirstChild("InventoryFolder").Value
		
		if not InventoryFolder then return Return end
		
		for i, v in next, Return do 
			
			for i2, v2 in next, v do 
				if typeof(v2) == 'table' and v2.itemType then
					v2.instance = InventoryFolder:FindFirstChild(v2.itemType)
				end
			end
			
			if typeof(v) == 'table' and v.itemType then
				v.instance = InventoryFolder:FindFirstChild(v.itemType)
			end
		end
	end
	
	return Return
end

function KillPlayer()
	BedwarsRemotes.ResetRemote:FireServer()
end

function GetWeapon()
	local Highest, Returning = -9e9, nil
	
	for i, v in next, GetInventory(LocalPlayer).items do 
		local Power = table.find(BedwarsSwords, v.itemType)
		
		if not Power then continue end 
		
		if Power > Highest then 
			Returning = v
			Highest = Power
		end
	end
	
	return Returning
end

function HashFunc(Vec)
	return {value = Vec}
end

function IsAlive(Player)
	if not Player.Character then return false end
	if not Player.Character:FindFirstChild("Head") then return false end
	if not Player.Character:FindFirstChild("Humanoid") then return false end
	if not Player.Character:FindFirstChild("HumanoidRootPart") then return false end

	return true
end

repeat task.wait() until game:IsLoaded()

function PlayerTp()
	KillPlayer()
	
	LocalPlayer.CharacterAdded:Connect(function()
		repeat task.wait() until IsAlive(LocalPlayer)
		
		local NearestPlayer = FindNearestPlayer()
		
		repeat task.wait() until LocalPlayer.Character:FindFirstChild("ForceField")
		
		task.wait(0.2)
		
		local TweenInformation = TweenInfo.new(0.65, Enum.EasingStyle.Linear, Enum.EasingDirection.In, 0, false, 0)
		local PlayerTpTween = TweenService:Create(LocalPlayer.Character:FindFirstChild("HumanoidRootPart"), TweenInformation, {CFrame = NearestPlayer.Character.HumanoidRootPart.CFrame})
		
		PlayerTpTween:Play()
	end)
end

task.spawn(function()
	local function KillauraHit(Enemy, Weapon)
		local ScytheSpinRemote = Client:Get("ScytheSpin").instance
		local KillauraRemote = Client:Get(BedwarsRemotes.AttackRemote).instance
		
		local LocalPlayerHumanoidRootPart = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
		local EnemyHumanoidRootPart = Enemy.Character:FindFirstChild("HumanoidRootPart")
		
		local SelfPosition = LocalPlayerHumanoidRootPart.Position + (Settings.KillAura.Range > 14 and (LocalPlayerHumanoidRootPart.Position - EnemyHumanoidRootPart.Position).Magnitude > 14.4 and (CFrame.lookAt(LocalPlayerHumanoidRootPart.Position, EnemyHumanoidRootPart.Position).lookVector * ((LocalPlayerHumanoidRootPart.Position - EnemyHumanoidRootPart.Position).Magnitude - 14)) or Vector3.zero)
		
		task.spawn(function()
			if Settings.KillAura.MultiAura == true then
				ScytheSpinRemote:FireServer({position = SelfPosition})
			end
		end)
		
		KillauraRemote:FireServer({
			["weapon"] = Weapon.tool,
			["chargedAttack"] = {chargeRatio = 0},
			["entityInstance"] = Enemy.Character,
			["validate"] = {
				["raycast"] = {
					["cameraPosition"] = HashFunc(LocalPlayerHumanoidRootPart.Position), 
					["cursorDirection"] = HashFunc(CFrame.new(SelfPosition, EnemyHumanoidRootPart.Position).lookVector)
				},
				["targetPosition"] = HashFunc(EnemyHumanoidRootPart.Position),
				["selfPosition"] = HashFunc(SelfPosition)
			}
		})
	end	
	
	task.spawn(function()
		while task.wait() do
			local NearestPlayer= FindNearestPlayer
			local Weapon = GetWeapon()
			
			if IsAlive(LocalPlayer) and NearestPlayer and Weapon and GetMatchState() ~= 0 then
				KillauraHit(NearestPlayer, Weapon)
			end
		end
	end)
end)
