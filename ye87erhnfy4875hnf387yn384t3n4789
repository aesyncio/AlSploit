local LocalPlayer = game.Players.LocalPlayer

local Camera = workspace.CurrentCamera

local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local KnitClient = debug.getupvalue(require(LocalPlayer.PlayerScripts.TS.knit).setup, 6)
local Client = require(game:GetService("ReplicatedStorage").TS.remotes).default.Client

function DumpRemote(Tab)
	for i, v in pairs(Tab) do
		if v == "Client" then
			return Tab[i + 1]
		end
	end
	return ""
end

local BedwarsSwords = require(ReplicatedStorage.TS.games.bedwars["bedwars-swords"]).BedwarsMelees

local Bedwars = {
	ClientHandlerStore = require(LocalPlayer.PlayerScripts.TS.ui.store).ClientStore,
	SwordController = KnitClient.Controllers.SwordController,
	EquipItemRemote = DumpRemote(debug.getconstants(debug.getproto(require(ReplicatedStorage.TS.entity.entities["inventory-entity"]).InventoryEntity.equipItem, 3))),
	CombatConstant = require(game:GetService("ReplicatedStorage").TS.combat["combat-constant"]).CombatConstant,
	KnockbackTable = debug.getupvalue(require(ReplicatedStorage.TS.damage["knockback-util"]).KnockbackUtil.calculateKnockbackVelocity, 1),
	AttackRemote = DumpRemote(debug.getconstants(KnitClient.Controllers.SwordController.sendServerRequest)),	
}

local Settings = {
	KillAura = {Value = true, Range = 18, Animation = true, CurrentAnimation = {["Value"] = "VerticalSpin"}},
}

function IsAlive(Player)
	Player = Player or LocalPlayer
	if not Player.Character then return false end
	if not Player.Character:FindFirstChild("Head") then return false end
	if not Player.Character:FindFirstChild("Humanoid") then return false end
	if Player.Character:FindFirstChild("Humanoid").Health < 0.11 then return false end
	return true
end

function GetMatchState()
	return Bedwars["ClientHandlerStore"]:getState().Game.matchState
end

local function GetInventory(Player)
	if not Player then 
		return {Items = {}, Armor = {}}
	end

	local Success, Return = pcall(function() 
		return require(ReplicatedStorage.TS.inventory["inventory-util"]).InventoryUtil.getInventory(Player)
	end)

	if not Success then 
		return {Items = {}, Armor = {}}
	end

	if Player.Character and Player.Character:FindFirstChild("InventoryFolder") then 
		local InvFolder = Player.Character:FindFirstChild("InventoryFolder").Value
		if not InvFolder then return Return end
		for i, v in next, Return do 
			for i2, v2 in next, v do 
				if typeof(v2) == 'table' and v2.itemType then
					v2.instance = InvFolder:FindFirstChild(v2.itemType)
				end
			end
			if typeof(v) == 'table' and v.itemType then
				v.instance = InvFolder:FindFirstChild(v.itemType)
			end
		end
	end
	return Return
end

function SwitchItem(Tool)
	if LocalPlayer.Character.HandInvItem.Value ~= Tool then
		Client:Get(Bedwars.EquipItemRemote):CallServerAsync({
			hand = Tool
		})

		local Started = tick()

		repeat task.wait() until (tick() - Started) > 0.3 or LocalPlayer.Character.HandInvItem.Value == Tool
	end
end

function GetScythe()
	for i, v in next, GetInventory(LocalPlayer).items do 
		if v.itemType:find("scythe") then
			return v
		end
	end
end

function GetSword()
	local Highest, Returning = -9e9, nil

	for i, v in next, GetInventory(LocalPlayer).items do 
		local Power = table.find(BedwarsSwords, v.itemType)

		if not Power then continue end 

		if Power > Highest and not v.itemType:find("scythe") then 
			Returning = v
			Highest = Power
		end
	end

	return Returning
end

function HashFunc(Vec)
	return {value = Vec}
end

local KillAuraAnimationCooldown = true

local OrigC0 = game:GetService("ReplicatedStorage").Assets.Viewmodel.RightHand.RightWrist.C0
local Animations = {
	["VerticalSpin"] = {
		{CFrame = CFrame.new(0, 0, 0) * CFrame.Angles(math.rad(-90), math.rad(8), math.rad(5)), Time = 0.1},
		{CFrame = CFrame.new(0, 0, 0) * CFrame.Angles(math.rad(180), math.rad(3), math.rad(13)), Time = 0.1},
		{CFrame = CFrame.new(0, 0, 0) * CFrame.Angles(math.rad(90), math.rad(-5), math.rad(8)), Time = 0.1},
		{CFrame = CFrame.new(0, 0, 0) * CFrame.Angles(math.rad(0), math.rad(0), math.rad(0)), Time = 0.1}	
	}
}

local KillauraRemote = Client:Get(Bedwars.AttackRemote).instance

function KillAuraHit()	
	for i, v in pairs(game.Players:GetPlayers()) do
		if IsAlive(v) and v.Team ~= LocalPlayer.Team then
			if Settings.KillAura.Value == true and GetMatchState() ~= 0 and IsAlive(LocalPlayer) then

				local LocalPlayerCharacter = LocalPlayer.Character
				local EnemyCharacter = v.Character

				local LocalPlayerHumanoidRootPart = LocalPlayerCharacter.HumanoidRootPart 
				local EnemyHumanoidRootPart = EnemyCharacter.HumanoidRootPart 

				local Magnitude = (LocalPlayerHumanoidRootPart.Position - EnemyHumanoidRootPart.Position).Magnitude

				if Magnitude <= 18 then
					local Sword = GetSword()

					if Sword then
						SwitchItem(Sword.tool)

						Magnitude = (LocalPlayerHumanoidRootPart.Position - EnemyHumanoidRootPart.Position).Magnitude

						if Settings.KillAura.Animation == true then
							spawn(function()
								if Settings.KillAura.Animation == true and KillAuraAnimationCooldown then
									KillAuraAnimationCooldown = false

									for i, v in pairs(Animations[Settings.KillAura.CurrentAnimation["Value"]]) do
										game:GetService("TweenService"):Create(Camera.Viewmodel.RightHand.RightWrist, TweenInfo.new(v.Time), {C0 = OrigC0 * v.CFrame}):Play()
										task.wait(v.Time - 0.01)
									end

									KillAuraAnimationCooldown = true
								end
							end)		
						end

						local SelfPosition = LocalPlayerHumanoidRootPart.Position + (Settings.KillAura.Range > 14 and (LocalPlayerHumanoidRootPart.Position - EnemyHumanoidRootPart.Position).Magnitude > 14.4 and (CFrame.lookAt(LocalPlayerHumanoidRootPart.Position, EnemyHumanoidRootPart.Position).lookVector * ((LocalPlayerHumanoidRootPart.Position - EnemyHumanoidRootPart.Position).Magnitude - 14)) or Vector3.zero)

						KillauraRemote:FireServer({
							weapon = Sword.tool,
							chargedAttack = {chargeRatio = 0},
							entityInstance = v.Character,
							validate = {
								raycast = {
									cameraPosition = HashFunc(LocalPlayerHumanoidRootPart.Position), 
									cursorDirection = HashFunc(CFrame.new(SelfPosition, EnemyHumanoidRootPart.Position).lookVector)
								},
								targetPosition = HashFunc(EnemyHumanoidRootPart.Position),
								selfPosition = HashFunc(SelfPosition)
							}
						})

						Bedwars.SwordController.lastAttack = game.Workspace:GetServerTimeNow()
					end
				end
			end
		end
	end
end

function ScytheAttack()
	for i, v in pairs(game.Players:GetPlayers()) do
		if IsAlive(v) and v.Team ~= LocalPlayer.Team then
			if Settings.KillAura.Value == true and GetMatchState() ~= 0 and IsAlive(LocalPlayer) then

				local LocalPlayerCharacter = LocalPlayer.Character
				local EnemyCharacter = v.Character

				local LocalPlayerHumanoidRootPart = LocalPlayerCharacter.HumanoidRootPart 
				local EnemyHumanoidRootPart = EnemyCharacter.HumanoidRootPart 

				local Magnitude = (LocalPlayerHumanoidRootPart.Position - EnemyHumanoidRootPart.Position).Magnitude

				if Magnitude <= 18 then
					local Scythe = GetScythe()

					if Scythe then
						SwitchItem(Scythe.tool)

						local SelfPosition = LocalPlayerHumanoidRootPart.Position + (Settings.KillAura.Range > 14 and (LocalPlayerHumanoidRootPart.Position - EnemyHumanoidRootPart.Position).Magnitude > 14.4 and (CFrame.lookAt(LocalPlayerHumanoidRootPart.Position, EnemyHumanoidRootPart.Position).lookVector * ((LocalPlayerHumanoidRootPart.Position - EnemyHumanoidRootPart.Position).Magnitude - 14)) or Vector3.zero)

						local ScytheSpinRemote = Client:Get("ScytheSpin").instance
						ScytheSpinRemote:FireServer({position = SelfPosition})

						local MoveVector = LocalPlayer.Character.Humanoid.MoveDirection
						Client:Get("ScytheDash"):SendToServer({direction = MoveVector * 9e9})
					end
				end
			end
		end
	end
end

function Extra()
	game:GetService("ReplicatedStorage").rbxts_include.node_modules:FindFirstChild("@rbxts").net.out._NetManaged.ForgePurchaseUpgrade:FireServer(2)
	Bedwars.CombatConstant.RAYCAST_SWORD_CHARACTER_DISTANCE = 18
	Client:Get("GroundHit"):SendToServer()
	Bedwars.KnockbackTable.kbDirectionStrength = 0
	Bedwars.KnockbackTable.kbUpwardStrength = 0
end

local KillauraHitTick = tick()
local ScytheHitTick = tick()

function KillauraController()
	RunService.Heartbeat:Connect(function()	
		for i, v in pairs(game.Players:GetPlayers()) do
			if IsAlive(v) and v.Team ~= LocalPlayer.Team then
				local LocalPlayerCharacter = LocalPlayer.Character
				local EnemyCharacter = v.Character

				local LocalPlayerHumanoidRootPart = LocalPlayerCharacter.HumanoidRootPart 
				local EnemyHumanoidRootPart = EnemyCharacter.HumanoidRootPart 

				local Magnitude = (LocalPlayerHumanoidRootPart.Position - EnemyHumanoidRootPart.Position).Magnitude

				if Settings.KillAura.Value == true and GetMatchState() ~= 0 and IsAlive(LocalPlayer) then
					if Magnitude <= 18 then
						repeat task.wait() until (tick() - KillauraHitTick) >= 0.6
						
						task.spawn(KillAuraHit)
						ScytheHitTick = tick() - 0.2

						repeat task.wait() until (tick() - ScytheHitTick) >= 0.8
						
						task.spawn(ScytheAttack)
						KillauraHitTick = tick()							
					end
				end
			end
		end
	end)
end

task.spawn(function()
	task.spawn(KillauraController)
end)

task.spawn(function()
	RunService.Heartbeat:Connect(function()
		task.spawn(Extra)
	end)
end)
