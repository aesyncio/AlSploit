local LocalPlayer = game:GetService("Players").LocalPlayer
local Camera = game:GetService("Workspace").CurrentCamera
local KnitClient = debug.getupvalue(require(LocalPlayer.PlayerScripts.TS.knit).setup, 6)
local Client = require(game:GetService("ReplicatedStorage").TS.remotes).default.Client

local RunService = game:GetService("RunService")
local TextChatService = game:GetService("TextChatService")

local Bedwars = {
	["KnockbackTable"] = debug.getupvalue(require(game:GetService("ReplicatedStorage").TS.damage["knockback-util"]).KnockbackUtil.calculateKnockbackVelocity, 1),
	["CombatConstant"] = require(game:GetService("ReplicatedStorage").TS.combat["combat-constant"]).CombatConstant,
	["SprintController"] = KnitClient.Controllers.SprintController,
	["ShopItems"] = debug.getupvalue(require(game:GetService("ReplicatedStorage").TS.games.bedwars.shop["bedwars-shop"]).BedwarsShop.getShopItem, 2),
	["DamageTypes"] = require(game:GetService("ReplicatedStorage").TS.damage["damage-type"]).DamageType,
	["PingController"] = require(LocalPlayer.PlayerScripts.TS.controllers.game.ping["ping-controller"]).PingController,
	["DamageIndicator"] = KnitClient.Controllers.DamageIndicatorController.spawnDamageIndicator,
	["ClientHandlerStore"] = require(LocalPlayer.PlayerScripts.TS.ui.store).ClientStore,
	["BlockCPSConstants"] = require(game:GetService("ReplicatedStorage").TS["shared-constants"]).CpsConstants,
	["SwordController"] = KnitClient.Controllers.SwordController,
}

local CombatValues = {
	KillAura = {Value = true, Range = 24, Animation = true, CurrentAnimation = {["Value"] = "VerticalSpin"}, Cooldown = true},
	Reach = {Value = true, Range = 0.135},
	Sprint = {Value = true},
	NoKnockback = {Value = true},
	ProjectileExploit = {Value = true, Range = 0}
}

local BlatantValues = {
	Speed = {Value = true, Speed = 0},
	JumpHeight = {Value = true, Height = 0},
	Fly = {Value = true, Speed = 0},
	InfFly = {Value = true, Speed = 0},
	Gravity = {Value = true, Gravity = 196.2},
	NoFall = {Value = true}
}

local UtilityValues = {
	AutoToxic = {Value = true},
	ChatSpammer = {Value = true},
	AutoReport = {Value = true},
}

local WorldValues = {
	AntiVoid = {Value = true, Transparency = 0.5},
	Nuker = {Value = true, Range = 30}
}

local function GetInventory(Player)
	if not Player then 
		return {Items = {}, Armor = {}}
	end

	local Success, Return = pcall(function() 
		return require(game:GetService("ReplicatedStorage").TS.inventory["inventory-util"]).InventoryUtil.getInventory(Player)
	end)

	if not Success then 
		return {Items = {}, Armor = {}}
	end
	if Player.Character and Player.Character:FindFirstChild("InventoryFolder") then 
		local InvFolder = Player.Character:FindFirstChild("InventoryFolder").Value
		if not InvFolder then return Return end
		for i, v in next, Return do 
			for i2, v2 in next, v do 
				if typeof(v2) == 'table' and v2.itemType then
					v2.instance = InvFolder:FindFirstChild(v2.itemType)
				end
			end
			if typeof(v) == 'table' and v.itemType then
				v.instance = InvFolder:FindFirstChild(v.itemType)
			end
		end
	end
	return Return
end

local BedwarsSwords = require(game:GetService("ReplicatedStorage").TS.games.bedwars["bedwars-swords"]).BedwarsSwords

function HashFunc(Vec)
	return {value = Vec}
end

local function GetSword()
	local Highest, Returning = -9e9, nil
	for i, v in next, GetInventory(LocalPlayer).items do 
		local Power = table.find(BedwarsSwords, v.itemType)
		if not Power then continue end 
		if Power > Highest then 
			Returning = v
			Highest = Power
		end
	end
	return Returning
end

function IsAlive(Player)
	Player = Player or LocalPlayer
	if not Player.Character then return false end
	if not Player.Character:FindFirstChild("Head") then return false end
	if not Player.Character:FindFirstChild("Humanoid") then return false end
	if Player.Character:FindFirstChild("Humanoid").Health < 0.11 then return false end
	return true
end

function GetMatchState()
	return Bedwars["ClientHandlerStore"]:getState().Game.matchState
end

function Getbeds()
	local Beds = {}
	for i, v in pairs(game:GetService("Workspace"):GetChildren()) do
		if string.lower(v.Name) == "bed" and v:FindFirstChild("Covers") ~= nil and v:FindFirstChild("Covers").Color ~= LocalPlayer.Team.TeamColor then
			table.insert(Beds, v)
		end
	end
	return Beds
end
function Getserverpos(Position)
	local X = math.round(Position.X/3)
	local Y = math.round(Position.Y/3)
	local Z = math.round(Position.Z/3)
	return Vector3.new(X, Y, Z)
end


local OrigC0 = game:GetService("ReplicatedStorage").Assets.Viewmodel.RightHand.RightWrist.C0
local Animations = {
	["Slow"] = {
		{CFrame = CFrame.new(0, 0, 0) * CFrame.Angles(math.rad(220), math.rad(100), math.rad(100)),Time = 0.25},
		{CFrame = CFrame.new(0, 0, 0) * CFrame.Angles(math.rad(0), math.rad(0), math.rad(0)), Time = 0.25}
	},
	["Weird"] = {
		{CFrame = CFrame.new(0, 0, 1.5) * CFrame.Angles(math.rad(0), math.rad(0), math.rad(0)),Time = 0.25},
		{CFrame = CFrame.new(0, 0, -1.5) * CFrame.Angles(math.rad(0), math.rad(0), math.rad(0)),Time = 0.25},
		{CFrame = CFrame.new(0, 0, 0) * CFrame.Angles(math.rad(0), math.rad(0), math.rad(0)), Time = 0.25}
	},
	["Self"] = {
		{CFrame = CFrame.new(0, 0, 0) * CFrame.Angles(math.rad(-90), math.rad(90), math.rad(90)),Time = 0.25},
		{CFrame = CFrame.new(0, 0, 0) * CFrame.Angles(math.rad(0), math.rad(0), math.rad(0)), Time = 0.25}
	},
	["Butcher"] = {
		{CFrame = CFrame.new(0, -1, 0) * CFrame.Angles(math.rad(0), math.rad(90), math.rad(0)),Time = 0.3},
		{CFrame = CFrame.new(0, 0, 0) * CFrame.Angles(math.rad(0), math.rad(0), math.rad(0)), Time = 0.3}
	},
	["VerticalSpin"] = {
		{CFrame = CFrame.new(0, 0, 0) * CFrame.Angles(math.rad(-90), math.rad(8), math.rad(5)), Time = 0.1},
		{CFrame = CFrame.new(0, 0, 0) * CFrame.Angles(math.rad(180), math.rad(3), math.rad(13)), Time = 0.1},
		{CFrame = CFrame.new(0, 0, 0) * CFrame.Angles(math.rad(90), math.rad(-5), math.rad(8)), Time = 0.1},
		{CFrame = CFrame.new(0, 0, 0) * CFrame.Angles(math.rad(0), math.rad(0), math.rad(0)), Time = 0.1}
	}
}



spawn(function()
	while task.wait() do
		if CombatValues.KillAura.Value == true and IsAlive(LocalPlayer) then
			task.wait()
			for i, v in pairs(game:GetService("Players"):GetChildren()) do
				if v.Team ~= LocalPlayer.Team and IsAlive(v) and IsAlive(LocalPlayer) and not v.Character:FindFirstChildOfClass("ForceField") then
					local Magnitude = (v.Character:FindFirstChild("HumanoidRootPart").Position - LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position).Magnitude
					if Magnitude < CombatValues.KillAura.Range then
						local Sword = GetSword()
						if Sword ~= nil then
							if CombatValues.KillAura.Animation == true then
								spawn(function()
									if CombatValues.KillAura.Animation == true and CombatValues.KillAura.Cooldown then
										CombatValues.KillAura.Cooldown = false
										for i, v in pairs(Animations[CombatValues.KillAura.CurrentAnimation["Value"]]) do
											game:GetService("TweenService"):Create(Camera.Viewmodel.RightHand.RightWrist,TweenInfo.new(v.Time),{C0 = OrigC0 * v.CFrame}):Play()
											task.wait(v.Time-0.01)
										end
										CombatValues.KillAura.Cooldown = true
									end
								end)
								Bedwars["SwordController"].lastAttack = game:GetService("Workspace"):GetServerTimeNow() - 0.11
								local Args = {
									[1] = {
										["chargedAttack"] = {["chargeRatio"] = 0},
										["entityInstance"] = v.Character,
										["validate"] = {
											["targetPosition"] = HashFunc(v.Character:FindFirstChild("HumanoidRootPart").Position),
											["raycast"] = {
												["cursorDirection"] = HashFunc(Ray.new(Camera.CFrame.Position, v.Character:FindFirstChild("HumanoidRootPart").Position).Unit.Direction),
												["cameraPosition"] = HashFunc(Camera.CFrame.Position)
											},
											["selfPosition"] = HashFunc(LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position + ((LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position - v.Character:FindFirstChild("HumanoidRootPart").Position).Magnitude > 14 and (CFrame.lookAt(LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position, v.Character:FindFirstChild("HumanoidRootPart").Position).LookVector * 4) or Vector3.new(0, 0, 0))),
										}, 
										["weapon"] = Sword.tool,
									}}
								game:GetService("ReplicatedStorage").rbxts_include.node_modules:FindFirstChild("@rbxts").net.out._NetManaged.SwordHit:FireServer(unpack(Args))
							end
						end
					end
				end
			end
		end
	end
end)

spawn(function()
	while task.wait() do
		if CombatValues.Reach.Value == true and IsAlive(LocalPlayer) then
			Bedwars["CombatConstant"].RAYCAST_SWORD_CHARACTER_DISTANCE = CombatValues.Reach.Range
		end
		if CombatValues.Sprint.Value == true and not Bedwars["SprintController"].sprinting and IsAlive(LocalPlayer) then
			Bedwars["SprintController"]:startSprinting()
		end
		if CombatValues.NoKnockback.Value == true and IsAlive(LocalPlayer) then
			Bedwars["KnockbackTable"]["kbDirectionStrength"] = 0
			Bedwars["KnockbackTable"]["kbUpwardStrength"] = 0
		end
		if CombatValues.ProjectileExploit.Value == true then

		end
		if BlatantValues.Gravity.Value == true then
			game:GetService("Workspace").Gravity = BlatantValues.Gravity.Gravity
		end	
	end
end)

task.spawn(function()
	LocalPlayer.leadertats.Kills.Changed:Connect(function()
		if UtilityValues.AutoToxic.Value == true then
			local KillMessage = ""
			local BedMessage = ""
			local ExtraMessage = ""
			local Randomized = math.random(0, 5)

			if Randomized == 0 then
				KillMessage = "You are so bad u died. | AlSpoit on top" .. ExtraMessage
				BedMessage = "Forgot bed breaker existed? | AlSpoit on top" .. ExtraMessage
			end
			if Randomized == 1 then
				KillMessage = "I could probably win without cheats. | AlSpoit on top" .. ExtraMessage
				BedMessage = "Got the bed that u sleep on. Good night sleeping in the bathtub. | AlSpoit on top" .. ExtraMessage
			end
			if Randomized == 2 then
				KillMessage = "I do not care about the fact that I am hacking but that you died in a block game. | AlSpoit on top" .. ExtraMessage
				BedMessage = "Bad cuz bad cuz sad cuz no dad cuz covered in grass? | AlSpoit on top" .. ExtraMessage
			end
			if Randomized == 3 then
				KillMessage = "Rats. Imagine dying in a block game. | AlSpoit on top" .. ExtraMessage
				BedMessage = "Forgot bed breaker existed? | AlSpoit on top" .. ExtraMessage
			end
			if Randomized == 4 then
				KillMessage = "I hack for fun. Too bad your fun is ruined. | Alsploit on top" .. ExtraMessage
				BedMessage = "Got the bed that u sleep on. Good night sleeping in the bathtub. | AlSpoit on top" .. ExtraMessage
			end
			if Randomized == 5 then
				KillMessage = "I ruin a good day for a good reason. | Alsploit on top" .. ExtraMessage
				BedMessage = "Bad cuz bad cuz sad cuz no dad cuz covered in grass? | AlSpoit on top" .. ExtraMessage
			end
			
			TextChatService.ChatInputBarConfiguration.TargetTextChannel:SendAsync(KillMessage)
		end
	end)
end)

task.spawn(function()
	local FinishedAntiVoid = false
	local AntivoidPart1 = nil
	local AntiVoiding = false
	local FixAntivoidPosition = true
	local OldLowestPosition = math.huge
	repeat
		task.wait(0.1)
		if WorldValues.AntiVoid.Value == true and IsAlive(LocalPlayer) then
			local Blocks = game:GetService("CollectionService"):GetTagged("block")
			local Blockraycast = RaycastParams.new()
			Blockraycast.FilterType = Enum.RaycastFilterType.Include
			Blockraycast.FilterDescendantsInstances = Blocks
			local LowestPosition = 99999
			for i, v in pairs(Blocks) do
				local NewRay = game:GetService("Workspace"):Raycast(v.Position + Vector3.new(0, 800, 0), Vector3.new(0, -1000, 0), Blockraycast)
				if AntivoidPart1 and NewRay and AntiVoiding == false and FixAntivoidPosition == true then
					LowestPosition = NewRay.Position.Y
					if LowestPosition < OldLowestPosition then
						OldLowestPosition = LowestPosition
						AntivoidPart1.Position = Vector3.new(0 ,LowestPosition - 16, 0)
					end
				end
				if NewRay and NewRay.Position.Y < LowestPosition and FinishedAntiVoid == false and FixAntivoidPosition == true then
					LowestPosition = NewRay.Position.Y
					local YPosition = LowestPosition - 12
					local AntivoidPart = Instance.new("Part")
					FinishedAntiVoid = true
					AntivoidPart.Anchored = true
					AntivoidPart.Size = Vector3.new(5000, 0.5, 5000)
					AntivoidPart.Material = Enum.Material.Neon
					AntivoidPart.Color = Color3.fromRGB(255, 65, 65)
					AntivoidPart.Transparency = WorldValues.AntiVoid.Transparency
					AntivoidPart.Position = Vector3.new(0, YPosition, 0)
					AntivoidPart.Parent = game:GetService("Workspace")
					AntivoidPart.Name = "AntivoidPart"
					AntivoidPart.CanCollide = false
					AntivoidPart1 = AntivoidPart
					AntivoidPart1.Touched:Connect(function()
						if LocalPlayer.Character.HumanoidRootPart.Position.Y < game:GetService("Workspace").AntivoidPart.Position.Y then
							AntiVoiding = true
							for i = 1, 3 do
								LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(0, 120, 0)
							end
							AntiVoiding = false
						end
					end)
				end
			end
		end
	until GetMatchState() ~= 0
end)

task.spawn(function()
	repeat
	if WorldValues.Nuker.Value == true and IsAlive(LocalPlayer) then
		task.wait(0.1)
		local Beds = Getbeds()
		for i, v in pairs(Beds) do
			local Magnitude = (v.Position - LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position).Magnitude
			if Magnitude < WorldValues.Nuker.Range then
				game:GetService("ReplicatedStorage").rbxts_include.node_modules:FindFirstChild("@rbxts").net.out._NetManaged.DamageBlock:InvokeServer({
						["blockRef"] = {
							["blockPosition"] = Getserverpos(v.Position)
						},
						["hitPosition"] = Getserverpos(v.Position),
						["hitNormal"] = Getserverpos(v.Position)
					})
				end
			end
		end
	until GetMatchState() ~= 0
end)

task.spawn(function()
	repeat
		task.wait()
		if BlatantValues.NoFall.Value == true and IsAlive(LocalPlayer) then
			game:GetService("ReplicatedStorage").rbxts_include.node_modules:FindFirstChild("@rbxts").net.out._NetManaged.GroundHit:FireServer()
		end
	until GetMatchState() ~= 0
end)
